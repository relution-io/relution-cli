import {Command} from './../utility/Command';
import {Observable} from '@reactivex/rxjs';
import {Validator} from './../utility/Validator';
import {Translation} from './../utility/Translation';
/**
 * create a autogenerated environment for the developer
 * This is a key => value Store for your server project.
 * ```bash
 *  relution env <$name>
 * ```
 */
/**
 * Environment
 */
export class Environment extends Command{

  public commands: Object = {
    add: {
      description: 'add a new Environment',
      vars: {
        name: {
          pos: 0
        }
      }
    },
    help: {
      description: 'List the Server Command'
    },
    quit: {
      description: 'Exit To Home'
    }
  };

  constructor() {
    super('env');
  }
  /**
   * add a name for a new environment
   */
  private _addName: Array<Object> = [
    {
      type: 'input',
      name: 'name',
      message: Translation.ENTER_SOMETHING.concat('Environment name'),
      validate: (value: string): any => {
        var pass = value.match(Validator.stringNumberPattern);
        if (pass) {
          return true;
        } else {
          return 'Please enter a Name';
        }
      }
    }
  ];

  renderEnvironment(name:string) {

  }

  enterName() {
    return Observable.fromPromise(this.inquirer.prompt(this._addName));
  }

  add(name?:string){
    if (!name || !name.length) {
      return Observable.create((observer:any) => {
        this.enterName().subscribe(
          (answers:Array<any>) => {
            console.log(answers);
          },
          (e:any) => console.error(e),
          () => {

          })
      });
    }
  }
}
