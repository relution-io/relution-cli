import {Command} from './../utility/Command';
import {Observable} from '@reactivex/rxjs';
import {Validator} from './../utility/Validator';
import {Translation} from './../utility/Translation';
import {FileApi} from './../utility/FileApi';
import {EnvironmentTemplate} from './../gii/templates/Environment';
/**
 * create a autogenerated environment for the developer
 * This is a key => value Store for your server project.
 * ```bash
 *  relution env <$name>
 * ```
 */
/**
 * Environment
 */
export class Environment extends Command {
  /**
   * available commands
   */
  public commands: Object = {
    add: {
      description: 'add a new Environment',
      vars: {
        name: {
          pos: 0
        }
      }
    },
    help: {
      description: 'List the Server Command'
    },
    quit: {
      description: 'Exit To Home'
    }
  };
  /**
   * hjson file helper
   */
  public fsApi: FileApi = new FileApi();

  constructor() {
    super('env');
  }
  /**
   * add a name for a new environment
   */
  get _addName(): Array<Object> {
    return [
      {
        type: 'input',
        name: 'name',
        message: Translation.ENTER_SOMETHING.concat('Environment name'),
        validate: (value: string): any => {
          var pass = value.match(Validator.stringPattern);
          if (pass) {
            return true;
          } else {
            let credential = 'Name';
            return `${Translation.NOT_VALID} ${Translation.ENTER_SOMETHING.concat('Environment name')}`;
          }
        }
      }
    ];
  }

  renderEnvironment(name: string) {

  }

  enterName() {
    let prompt = this._addName;
    return Observable.fromPromise(this.inquirer.prompt(prompt));
  }

  add(name?: string) {
    if (!name || !name.length) {
      return Observable.create((observer: any) => {
        this.enterName().subscribe(
          (answers: any) => {
            let template = new EnvironmentTemplate();
            observer.next(template);
            this.fsApi.writeHjson(template.render(answers.name), answers.name).subscribe(
              (pipe:any) => {},
              () => {},
              () => {
                observer.complete();
              }
            );
          },
          (e: any) => console.error(e),
          () => observer.complete
        );
      });
    }
  }
}
