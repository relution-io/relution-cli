import {Command} from './../utility/Command';
import * as chalk from 'chalk';
import {find, findIndex, sortBy} from 'lodash';
import {Observable, Observer} from '@reactivex/rxjs';
import {ServerModelRc, ServerModel} from './../models/ServerModelRc';
import * as Relution from 'relution-sdk';
import {FileApi} from './../utility/FileApi';
import {RxFs} from './../utility/RxFs';
import {Archiver} from './../utility/Archiver';
const figures = require('figures');
import * as path from 'path';

const loader = require('cli-loader')();
/**
 * create a new Baas for the Developer
 */
export class Deploy extends Command {
  constructor() {
    super('deploy');
  }
  private _deployServer: ServerModel;
  private _promptkey: string = 'deployserver';
  private _defaultServer: string = 'default';
  private _archiver: Archiver = new Archiver();
  private _relutionHjson: any;
  private _projectDir: string;
  private _fileApi: FileApi = new FileApi();

  public commands: any = {
    deploy: {
      description: this.i18n.DEPLOY,
      vars: {
        name: {
          pos: 0
        }
      }
    },
    help: {
      description: this.i18n.LIST_COMMAND('Deploy')
    },
    quit: {
      description: this.i18n.EXIT_TO_HOME
    }
  };

  /**
   * login on Relution
   * @link [relution-sdk](https://github.com/relution-io/relution-sdk)
   */
  login(serverModel: ServerModelRc):Observable<any> {
     Relution.init({
      serverUrl: serverModel.serverUrl,
      application: 'studio'
    });
    let currentUser = Relution.security.getCurrentUser();
    if (currentUser) {
      //this.log.info('Relution.security.getCurrentUser()', currentUser);
      return Observable.create((observer:any) => {
        observer.next({user: currentUser});
        observer.complete();
      })
    }

    //this.log.info('Relution', JSON.stringify(Relution.security, null, 2))
    let credentials = {
      userName: serverModel.userName,
      password: serverModel.password
    };

    return Observable.fromPromise(Relution.web.login(credentials));
  }
  /**
   * choose first on which Server the App has to be deployed
   */
  getServerPrompt(): Observable<any> {
    this._defaultServer = 'default';
    let prompt = this._copy(this._parent.staticCommands.server.crudHelper.serverListPrompt(this._promptkey, 'list', 'Select a Server'));
    let indexDefault: number = findIndex(this.userRc.config.server, { default: true });
    if (indexDefault > -1) {
      this._defaultServer += ` ${prompt[0].choices[indexDefault]}`
      prompt[0].choices.splice(indexDefault, 1);
      prompt[0].choices.unshift(this._defaultServer);
    }
    return Observable.fromPromise(this.inquirer.prompt(prompt));
  }

  /**
   * Get the organisation and test if it has defaultRoles. If not raise an error. If an application is generated by a user in a group that has no defaultRoles the application
   * doesn't work as expected.
   */
  checkOrga(resp: any) {
    let orga: any = Relution.security.getCurrentOrganization('defaultRoles');
    return orga && orga.defaultRoles.length > 0;
  }
  /**
   * upload the generated zip to the server
   */
  upload(archiveresp: any, env: string): Observable<any> {
    loader.start();
    let formData = {
      // Pass a simple key-value pair
      env: env,
      name: this._relutionHjson.name,
      uuid: this._relutionHjson.uuid,
      // Pass optional meta-data with an 'options' object with style: {value: DATA, options: OPTIONS}
      // Use case: for some types of streams, you'll need to provide "file"-related information manually.
      // See the `form-data` README for more information about options: https://github.com/form-data/form-data
      custom_file: {
        value: archiveresp.readStream,
        options: {
          filename: path.basename(archiveresp.zip),
          contentType: 'application/zip'
        }
      }
    };
    return Observable.fromPromise(
      Relution.web.ajax({
        url: 'upload',
        headers: {
          "Accept": "text/plain"
        },
        method: 'POST',
        formData: formData,
        responseCallback: (resp:Q.Promise<any>) => {
          return resp.then(
            (r:any) => {
              r.pipe(process.stdout, { 'end': false });
              return r;
          });
        }
      })
    );
  }


  /**
   * deploy the baas to the server
   */
  public deploy(): Observable<any> {
    this._fileApi.path = this.projectDir;
    //loginresponse
    let userResp: Relution.security.User;
    //choosed environment
    let envName: string = '';
    //choosed Server
    let choosedServer: any;

    if (!RxFs.exist(path.join(process.cwd(), 'relution.hjson')) || !RxFs.exist(path.join(process.cwd(), '.relutionignore'))) {
      return Observable.throw(new Error(`${process.cwd()} is not a valid Relution Project`));
    }
    //load the environments before
    return this._parent.staticCommands.env.envCollection.getEnvironments()
      /**
       * load the relution.hjson
       */
      .map(() => {
        return this._fileApi.readHjson(path.join(this.projectDir, 'relution.hjson'))
      })
      .exhaust()
      /**
       * get a server from inquirer
       */
      .map((relutionHjson:{data:any, path:string}) => {
        this._relutionHjson = relutionHjson.data;
        return this.getServerPrompt()
      })
      .exhaust()
      .filter((server: {deployserver: string}) => {
        return server.deployserver !== this.i18n.TAKE_ME_OUT;
      })
      /**
       * logged in on server
       */
      .map((server: {deployserver: string}) => {
        if (server.deployserver.toString().trim() === this._defaultServer.toString().trim()) {
          choosedServer = find(this.userRc.config.server, { default: true });
        } else {
          choosedServer = find(this.userRc.config.server, { id: server.deployserver });
        }
        return this.login(choosedServer);
      })
      .exhaust()
      /**
       * choose environment
       */
      .map((resp:any) => {
        userResp = resp.user;
        if (!this.checkOrga(userResp)) {
          return Observable.throw(new Error(`Organization has no defaultRoles. This will cause problems creating applications. Operation not permitted.`));
        }
        this.log.info(chalk.green(`logged in as ${userResp.givenName ? userResp.givenName + ' ' + userResp.surname : userResp.name}`));
        return this._parent.staticCommands.env.chooseEnv.choose('list');
      })
      .exhaust()
      .filter((answers:{env:string}) => {
        return answers.env !== this.i18n.TAKE_ME_OUT;
      })
      /**
       * create the zip File
       */
      .map((answers:{env:string}) => {
        envName = answers[this._parent.staticCommands.env.chooseEnv.promptName];
        return this._archiver.createBundle()
      })
      /**
       * loop into logs don when zip is coming upload start
       */
      .exhaustMap((log:Observable<{file:string}|{directory:string}|{zip:string, readStream:any, message:string}>) => {
        return log.map((log:any) => {
          if (log.file || log.directory) {
            this.log.info(chalk.magenta(log.file ? `add file ${log.file}` : `add directory ${log.directory}`));
          } else if (log.processed) {
            this.log.info(chalk.green(log.processed) + ' ' + figures.tick);
          }
          return log;
        })
        .filter( (log: {file:string}|{directory:string}|{zip:string, readStream:any, message:string}) => {
          return log['zip'];
        })
        /**
         * upload zip to server
         */
        .map((log: {zip:string, readStream:any, message:string}) => {
          this.log.info(chalk.green(log.message) + ' ' + figures.tick);
          return this.upload(log, envName);
        });
      })
      .exhaust()
      /**
       * complete upload
       */
      .map((resp:any) => {
        loader.stop();
        return resp;
      });
  }

  public get projectDir(): string {
    if (!this._projectDir) {
      this._projectDir = process.cwd();
    }
    return this._projectDir;
  }

  public set projectDir(v: string) {
    this._projectDir = v;
  }

  public get relutionHjson(): any {
    return this._relutionHjson;
  }

  public set relutionHjson(v: any) {
    this._relutionHjson = v;
  }
}
