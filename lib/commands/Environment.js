"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Command_1 = require('./../utility/Command');
var rxjs_1 = require('@reactivex/rxjs');
var Validator_1 = require('./../utility/Validator');
var Translation_1 = require('./../utility/Translation');
/**
 * create a autogenerated environment for the developer
 * This is a key => value Store for your server project.
 * ```bash
 *  relution env <$name>
 * ```
 */
/**
 * Environment
 */
var Environment = (function (_super) {
    __extends(Environment, _super);
    function Environment() {
        _super.call(this, 'env');
        this.commands = {
            add: {
                description: 'add a new Environment',
                vars: {
                    name: {
                        pos: 0
                    }
                }
            },
            help: {
                description: 'List the Server Command'
            },
            quit: {
                description: 'Exit To Home'
            }
        };
        /**
         * add a name for a new environment
         */
        this._addName = [
            {
                type: 'input',
                name: 'name',
                message: Translation_1.Translation.ENTER_SOMETHING.concat('Environment name'),
                validate: function (value) {
                    var pass = value.match(Validator_1.Validator.stringNumberPattern);
                    if (pass) {
                        return true;
                    }
                    else {
                        return 'Please enter a Name';
                    }
                }
            }
        ];
    }
    Environment.prototype.renderEnvironment = function (name) {
    };
    Environment.prototype.enterName = function () {
        return rxjs_1.Observable.fromPromise(this.inquirer.prompt(this._addName));
    };
    Environment.prototype.add = function (name) {
        var _this = this;
        if (!name || !name.length) {
            return rxjs_1.Observable.create(function (observer) {
                _this.enterName().subscribe(function (answers) {
                    console.log(answers);
                }, function (e) { return console.error(e); }, function () {
                });
            });
        }
    };
    return Environment;
}(Command_1.Command));
exports.Environment = Environment;
//# sourceMappingURL=Environment.js.map