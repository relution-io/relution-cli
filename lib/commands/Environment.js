"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Command_1 = require('./../utility/Command');
var rxjs_1 = require('@reactivex/rxjs');
var Validator_1 = require('./../utility/Validator');
var Translation_1 = require('./../utility/Translation');
var FileApi_1 = require('./../utility/FileApi');
var Gii_1 = require('./../gii/Gii');
/**
 * create a autogenerated environment for the developer
 * This is a key => value Store for your server project.
 * ```bash
 *  relution env <$name>
 * ```
 */
/**
 * Environment
 */
var Environment = (function (_super) {
    __extends(Environment, _super);
    function Environment() {
        _super.call(this, 'env');
        /**
         * available commands
         */
        this.commands = {
            add: {
                description: 'add a new Environment',
                vars: {
                    name: {
                        pos: 0
                    }
                }
            },
            help: {
                description: 'List the Server Command'
            },
            quit: {
                description: 'Exit To Home'
            }
        };
        /**
         * hjson file helper
         */
        this.fsApi = new FileApi_1.FileApi();
        this.gii = new Gii_1.Gii();
        this.envFiles = [];
    }
    Environment.prototype.createEnvironment = function (name) {
        var _this = this;
        return rxjs_1.Observable.create(function (observer) {
            var template = _this.gii.getTemplateByName(_this.name);
            _this.fsApi.writeHjson(template.instance.render(name), name).subscribe(function (pipe) {
                observer.next(pipe);
            }, function (e) { observer.error(e); }, function () { observer.complete(); });
        });
    };
    Object.defineProperty(Environment.prototype, "_addName", {
        /**
         * add a name for a new environment
         */
        get: function () {
            var self = this;
            return [
                {
                    type: 'input',
                    name: 'name',
                    message: Translation_1.Translation.ENTER_SOMETHING.concat('Environment name'),
                    validate: function (value) {
                        var done = this.async();
                        self.getEnvironments().subscribe(function (files) {
                            if (files.indexOf(value + ".hjson") !== -1) {
                                console.log("Name " + value + " already exist Please choose another one");
                                done(false);
                            }
                            var pass = value.match(Validator_1.Validator.stringPattern);
                            if (pass) {
                                done(null, true);
                            }
                            else {
                                done(false);
                            }
                        });
                    }
                }
            ];
        },
        enumerable: true,
        configurable: true
    });
    Environment.prototype.getEnvironments = function () {
        return this.fsApi.fileList(process.cwd() + "/devtest", '.hjson');
    };
    Environment.prototype.enterName = function () {
        var prompt = this._addName;
        return rxjs_1.Observable.fromPromise(this.inquirer.prompt(prompt));
    };
    /**
     * add a new Environment allow attributes name as a string
     */
    Environment.prototype.add = function (name) {
        var _this = this;
        if (!name || !name.length) {
            return rxjs_1.Observable.create(function (observer) {
                _this.enterName().subscribe(function (answers) {
                    _this.createEnvironment(answers.name).subscribe({
                        complete: function () { return observer.complete(); }
                    });
                }, function (e) { return console.error(e); }, function () { observer.complete(); });
            });
        }
        if (name[0].match(Validator_1.Validator.stringPattern)) {
            return rxjs_1.Observable.create(function (observer) {
                _this.createEnvironment(name[0]).subscribe(function () { observer.next(); }, function (e) { observer.error(e); }, function () { observer.complete(); });
            });
        }
        rxjs_1.Observable.throw('Your name is not valid');
    };
    return Environment;
}(Command_1.Command));
exports.Environment = Environment;
//# sourceMappingURL=Environment.js.map