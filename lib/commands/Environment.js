"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Command_1 = require('./../utility/Command');
var chalk = require('chalk');
var lodash_1 = require('lodash');
var rxjs_1 = require('@reactivex/rxjs');
var Validator_1 = require('./../utility/Validator');
var Translation_1 = require('./../utility/Translation');
var EnvCollection_1 = require('./../collection/EnvCollection');
var FileApi_1 = require('./../utility/FileApi');
var Gii_1 = require('./../gii/Gii');
var ChooseEnv_1 = require('./environment/ChooseEnv');
var AddAttribute_1 = require('./environment/AddAttribute');
/**
 * create a autogenerated environment for the developer
 * This is a key => value Store for your server project.
 * ```bash
 *  relution env <$name>
 * ```
 */
/**
 * Environment
 */
var Environment = (function (_super) {
    __extends(Environment, _super);
    function Environment() {
        _super.call(this, 'env');
        /**
         * available commands
         */
        this.commands = {
            add: {
                description: 'add a new Environment',
                vars: {
                    name: {
                        pos: 0
                    }
                }
            },
            update: {
                description: 'Add a new key value pair to your Environment.',
                vars: {
                    name: {
                        pos: 0
                    }
                }
            },
            copy: {
                description: 'copy a exist Environment',
                vars: {
                    from: {
                        pos: 0
                    },
                    name: {
                        pos: 1
                    }
                }
            },
            list: {
                description: 'List all environments by name'
            },
            help: {
                description: Translation_1.Translation.LIST_COMMAND('Environment')
            },
            quit: {
                description: 'Exit To Home'
            }
        };
        /**
         * hjson file helper
         */
        this.fsApi = new FileApi_1.FileApi();
        /**
         * code generator
         */
        this.gii = new Gii_1.Gii();
        /**
         * the collection of the available environments
         */
        this.envCollection = new EnvCollection_1.EnvCollection();
        /**
         * prompt for add key value pair
         */
        this.addAttribute = new AddAttribute_1.AddAttribute();
    }
    /**
     * write the hjson to the dev folder
     * @todo add process.cwd as path
     * @params name create a <$name>.hjson in the project env folder
     * @returns Observable
     */
    Environment.prototype.createEnvironment = function (name) {
        var _this = this;
        return rxjs_1.Observable.create(function (observer) {
            var template = _this.gii.getTemplateByName(_this.name);
            _this.fsApi.writeHjson(template.instance.render(name), name).subscribe(function (pipe) {
                observer.next(pipe);
            }, function (e) { observer.error(e); }, function () {
                _this.envCollection.getEnvironments().subscribe({
                    complete: function () { return observer.complete(); }
                });
            });
        });
    };
    /**
     * overwrite Commnad preload and load environments before
     * @returns Observable
     */
    Environment.prototype.preload = function () {
        var _this = this;
        return rxjs_1.Observable.create(function (observer) {
            _this.envCollection.getEnvironments().subscribe({
                complete: function () {
                    // console.log(this.envCollection.collection);
                    _this.chooseEnv = new ChooseEnv_1.ChooseEnv(_this.envCollection);
                    _super.prototype.preload.call(_this).subscribe({ complete: function () { return observer.complete(); } });
                }
            });
        });
    };
    Object.defineProperty(Environment.prototype, "_addName", {
        /**
         * add a name for a new environment
         * @returns Array
         */
        get: function () {
            var self = this;
            return [
                {
                    type: 'input',
                    name: 'name',
                    message: Translation_1.Translation.ENTER_SOMETHING.concat('Environment name'),
                    validate: function (value) {
                        var done = this.async();
                        if (self.envCollection.isUnique(value)) {
                            console.log(chalk.red("\n Name " + value + " already exist please choose another one"));
                            done(false);
                        }
                        var pass = value.match(Validator_1.Validator.stringPattern);
                        if (pass) {
                            done(null, true);
                        }
                        else {
                            console.log(chalk.red("\n Name " + value + " has wrong character allowed only [a-z A-Z]"));
                            done(false);
                        }
                    }
                }
            ];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * create a prompt to enter a name
     * @returns Observable
     */
    Environment.prototype.enterName = function () {
        var prompt = this._addName;
        return rxjs_1.Observable.fromPromise(this.inquirer.prompt(prompt));
    };
    Environment.prototype.getAttributes = function (store) {
        var _this = this;
        return rxjs_1.Observable.create(function (observer) {
            _this.addAttribute.store().subscribe(function (answers) {
                // console.log('answers store', answers);
                store.push({ key: answers.key.trim(), value: answers.value.trim() });
            }, function (e) { return console.error(e); }, function () {
                _this.addAttribute.addAnother().subscribe(function (answers) {
                    // console.log('answers another', answers );
                    if (answers[_this.addAttribute.addPromptName] === false) {
                        observer.next(store);
                        return observer.complete();
                    }
                    // console.log('store', store);
                    _this.getAttributes(store).subscribe({
                        complete: function () {
                            observer.next(store);
                            observer.complete();
                        }
                    });
                });
            });
        });
    };
    /**
     *
     */
    Environment.prototype.update = function (name) {
        var _this = this;
        var attributes = [];
        var names = [];
        this.chooseEnv.choose().subscribe(function (answers) {
            names = answers[_this.chooseEnv.promptName];
            // console.log(names);
            if (names.indexOf(Translation_1.Translation.TAKE_ME_OUT) !== -1) {
                return _super.prototype.home.call(_this);
            }
            _this.getAttributes([]).subscribe(function (attrs) {
                attributes = attrs;
                // console.log('result', attributes);
                _this.envCollection.bulkUpdate(names, attributes).subscribe(function (res) {
                    // console.log('complete????');
                    _super.prototype.home.call(_this);
                });
            });
        });
    };
    /**
     * shows all available environments
     * @returns Observable
     */
    Environment.prototype.list = function () {
        var _this = this;
        return rxjs_1.Observable.create(function (observer) {
            var content = [['']];
            var tableHeader = ['Environment Name'];
            var list = _this.envCollection.flatEnvArray();
            list.forEach(function (name) {
                content.push([chalk.yellow("" + name)]);
            });
            if (content.length < 1) {
                observer.complete();
            }
            observer.next(_this.table.sidebar(tableHeader, content));
            observer.complete();
        });
    };
    Environment.prototype.copy = function (name, to) {
        var _this = this;
        var tobeCopied;
        var toBeGenerate;
        return rxjs_1.Observable.create(function (observer) {
            _this.chooseEnv.choose('list', Translation_1.Translation.SELECT('Environment')).subscribe(function (answers) {
                tobeCopied = answers[_this.chooseEnv.promptName];
                console.log(tobeCopied);
                _this.enterName().subscribe(function (answers) {
                    toBeGenerate = answers.name;
                    console.log(toBeGenerate);
                    _this.envCollection.copyByName(tobeCopied, toBeGenerate).subscribe({
                        complete: function () {
                            console.log('copied');
                            observer.complete();
                        }
                    });
                });
            });
        });
    };
    /**
     * add a new Environment allow attributes name as a string
     * @returns Observable
     */
    Environment.prototype.add = function (name) {
        var _this = this;
        //['relution', 'env', 'add']
        if (!name || !name.length) {
            return rxjs_1.Observable.create(function (observer) {
                _this.enterName().subscribe(function (answers) {
                    _this.createEnvironment(answers.name).subscribe({
                        complete: function () {
                            observer.complete();
                        }
                    });
                }, function (e) { return console.error(e); }, function () { observer.complete(); });
            });
        }
        //>relution env add bubble
        // console.log('name', name);
        if (lodash_1.isArray(name)) {
            // console.log('isArray(name)', isArray(name));
            var envName = name[0];
            // console.log('envName', envName);
            var pass = envName.match(Validator_1.Validator.stringPattern);
            // console.log('pass', pass);
            var unique = this.envCollection.isUnique(envName);
            // console.log('unique', unique);
            if (unique) {
                console.log(chalk.red("\n Name " + envName + " already exist please choose another one"));
                return this.init([this.name], this._parent);
            }
            if (pass) {
                return this.createEnvironment(envName).subscribe(function () { }, function (e) { console.error(e); }, function () { process.exit(); });
            }
            console.log(chalk.red("\n Name " + envName + " has wrong character allowed only [a-z A-Z]"));
            return this.init([this.name], this._parent);
        }
    };
    return Environment;
}(Command_1.Command));
exports.Environment = Environment;
//# sourceMappingURL=Environment.js.map