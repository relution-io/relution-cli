"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Command_1 = require('./../utility/Command');
var chalk = require('chalk');
var lodash_1 = require('lodash');
var rxjs_1 = require('@reactivex/rxjs');
var Relution = require('relution-sdk');
var FileApi_1 = require('./../utility/FileApi');
var RxFs_1 = require('./../utility/RxFs');
var Archiver_1 = require('./../utility/Archiver');
var figures = require('figures');
var path = require('path');
var loader = require('cli-loader')();
/**
 * ```bash
 * ┌─────────┬──────────┬──────────┬────────────────────────────────┐
 * │ Options │ Commands │ Param(s) │ Description                    │
 * │         │          │          │                                │
 * │ deploy  │ deploy   │ <$name>  │ deploy your Baas to the server │
 * │ deploy  │ help     │ --       │ List the Deploy Command        │
 * │ deploy  │ quit     │ --       │ Exit to Home                   │
 * │         │          │          │                                │
 * └─────────┴──────────┴──────────┴────────────────────────────────┘
 * ```
 */
var Deploy = (function (_super) {
    __extends(Deploy, _super);
    function Deploy() {
        _super.call(this, 'deploy');
        this._promptkey = 'deployserver';
        this._defaultServer = 'default';
        this._archiver = new Archiver_1.Archiver();
        this._fileApi = new FileApi_1.FileApi();
        this.commands = {
            deploy: {
                description: this.i18n.DEPLOY,
                vars: {
                    name: {
                        pos: 0
                    }
                }
            },
            help: {
                description: this.i18n.LIST_COMMAND('Deploy')
            },
            quit: {
                description: this.i18n.EXIT_TO_HOME
            }
        };
    }
    /**
     * choose first on which Server the App has to be deployed
     */
    Deploy.prototype.getServerPrompt = function () {
        this._defaultServer = 'default';
        var prompt = this._copy(this._parent.staticCommands.server.crudHelper.serverListPrompt(this._promptkey, 'list', 'Select a Server'));
        var indexDefault = lodash_1.findIndex(this.userRc.config.server, { default: true });
        if (indexDefault > -1) {
            this._defaultServer += " " + prompt[0].choices[indexDefault];
            prompt[0].choices.splice(indexDefault, 1);
            prompt[0].choices.unshift(this._defaultServer);
        }
        return rxjs_1.Observable.fromPromise(this.inquirer.prompt(prompt));
    };
    /**
     * Get the organisation and test if it has defaultRoles. If not raise an error. If an application is generated by a user in a group that has no defaultRoles the application
     * doesn't work as expected.
     */
    Deploy.prototype.checkOrga = function (resp) {
        var orga = Relution.security.getCurrentOrganization('defaultRoles');
        return orga && orga.defaultRoles.length > 0;
    };
    /**
     * upload the generated zip to the server
     */
    Deploy.prototype.upload = function (archiveresp, env) {
        loader.start();
        var formData = {
            // Pass a simple key-value pair
            env: env,
            name: this._relutionHjson.name,
            uuid: this._relutionHjson.uuid,
            // Pass optional meta-data with an 'options' object with style: {value: DATA, options: OPTIONS}
            // Use case: for some types of streams, you'll need to provide 'file'-related information manually.
            // See the `form-data` README for more information about options: https://github.com/form-data/form-data
            custom_file: {
                value: archiveresp.readStream,
                options: {
                    filename: path.basename(archiveresp.zip),
                    contentType: 'application/zip'
                }
            }
        };
        return rxjs_1.Observable.fromPromise(Relution.web.ajax({
            url: 'upload',
            headers: {
                'Accept': 'text/plain'
            },
            method: 'POST',
            formData: formData,
            responseCallback: function (resp) {
                return resp.then(function (r) {
                    r.pipe(process.stdout, { 'end': false });
                    return r;
                });
            }
        }));
    };
    /**
     * deploy the baas to the server
     */
    Deploy.prototype.deploy = function () {
        var _this = this;
        this._fileApi.path = this.projectDir;
        // loginresponse
        var userResp;
        // choosed environment
        var envName = '';
        // choosed Server
        var choosedServer;
        if (!RxFs_1.RxFs.exist(path.join(process.cwd(), 'relution.hjson')) || !RxFs_1.RxFs.exist(path.join(process.cwd(), '.relutionignore'))) {
            return rxjs_1.Observable.throw(new Error(process.cwd() + " is not a valid Relution Project"));
        }
        // load the environments before
        return this._parent.staticCommands.env.envCollection.getEnvironments()
            .exhaustMap(function () {
            return _this._fileApi.readHjson(path.join(_this.projectDir, 'relution.hjson'));
        })
            .exhaustMap(function (relutionHjson) {
            _this._relutionHjson = relutionHjson.data;
            return _this.getServerPrompt()
                .filter(function (server) {
                return server.deployserver !== _this.i18n.TAKE_ME_OUT;
            });
        })
            .exhaustMap(function (server) {
            if (server.deployserver.toString().trim() === _this._defaultServer.toString().trim()) {
                choosedServer = lodash_1.find(_this.userRc.config.server, { default: true });
            }
            else {
                choosedServer = lodash_1.find(_this.userRc.config.server, { id: server.deployserver });
            }
            loader.start();
            return _this.relutionSDK.login(choosedServer);
        })
            .exhaustMap(function (resp) {
            userResp = resp.user;
            loader.stop();
            if (!_this.checkOrga(userResp)) {
                return rxjs_1.Observable.throw(new Error("Organization has no defaultRoles. This will cause problems creating applications. Operation not permitted."));
            }
            _this.log.info(chalk.green("logged in as " + (userResp.givenName ? userResp.givenName + ' ' + userResp.surname : userResp.name)));
            return _this._parent.staticCommands.env.chooseEnv.choose('list')
                .filter(function (answers) {
                return answers.env !== _this.i18n.TAKE_ME_OUT;
            })
                .map(function (answers) {
                envName = answers[_this._parent.staticCommands.env.chooseEnv.promptName];
                return _this._archiver.createBundle();
            });
        })
            .exhaustMap(function (log) {
            return log.map(function (respLog) {
                if (respLog.file || respLog.directory) {
                    _this.log.info(chalk.magenta(respLog.file ? "add file " + respLog.file : "add directory " + respLog.directory));
                }
                else if (respLog.processed) {
                    _this.log.info(chalk.green(respLog.processed) + ' ' + figures.tick);
                }
                return respLog;
            })
                .filter(function (respLog) {
                return respLog['zip'];
            });
        })
            .exhaustMap(function (respLog) {
            _this.log.info(chalk.green(respLog.message) + ' ' + figures.tick);
            return _this.upload(respLog, envName);
        })
            .map(function (resp) {
            loader.stop();
            return rxjs_1.Observable.empty();
        });
    };
    Object.defineProperty(Deploy.prototype, "projectDir", {
        get: function () {
            if (!this._projectDir) {
                this._projectDir = process.cwd();
            }
            return this._projectDir;
        },
        set: function (v) {
            this._projectDir = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Deploy.prototype, "relutionHjson", {
        get: function () {
            return this._relutionHjson;
        },
        set: function (v) {
            this._relutionHjson = v;
        },
        enumerable: true,
        configurable: true
    });
    return Deploy;
}(Command_1.Command));
exports.Deploy = Deploy;
//# sourceMappingURL=Deploy.js.map